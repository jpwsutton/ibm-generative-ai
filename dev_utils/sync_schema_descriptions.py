import inspect
import logging
import os
import subprocess
from datetime import datetime
from pathlib import Path

from dotenv import load_dotenv
from pydantic import BaseModel

from genai import Credentials
from genai.schemas.generate_params import GenerateParams
from genai.schemas.token_params import TokenParams
from genai.services import RequestHandler

logger = logging.getLogger(__name__)


def get_git_val(value: str) -> str:
    res = subprocess.run(["git", "config", value], stdout=subprocess.PIPE)
    return res.stdout.strip().decode()


def get_git_user() -> str:
    return f"{get_git_val('user.name')}: {get_git_val('user.email')}"


def get_schema(credentials: Credentials) -> dict:
    schema_url = f"{credentials.api_endpoint}/models/full"
    logger.info(f"Downloading Schema from {schema_url}")
    schema_doc = RequestHandler.get(schema_url, key=credentials.api_key)
    assert schema_doc.status_code == 200
    return schema_doc.json()["results"]


def generate_strings_template_for_class(
    schema_id: str, genai_model: BaseModel, schema_doc: dict, schema_endpoint: str
) -> str:
    print(f"Generating Description Strings class for model: {genai_model.__name__}")

    model_schema = genai_model.schema(by_alias=True)["properties"]

    schema_gen = schema_doc[schema_id][0]
    schema_gen_params = schema_gen["value"]["properties"]["parameters"]["properties"]
    param_keys = schema_gen_params.keys()

    description_lines = [
        "# flake8: noqa\n",  # These contain long strings so tell flake8 to ignore this file
        "# fmt: off\n,"  # As it's generated automatically, tell black to ignore this file
        f"# Schema Descriptions class for: {genai_model.__name__}\n"
        f"#     Generated by: {get_git_user()}\n"
        f"#     Generated on: {datetime.now().isoformat()}\n"
        f"#     Generated from Schema at: {schema_endpoint}: {schema_id}\n"
        f"class {genai_model.__name__}Descriptions:\n",
    ]

    for key in param_keys:
        if isinstance(schema_gen_params[key], dict):
            if "description" in schema_gen_params[key]:
                schema_desc = schema_gen_params[key]["description"]
                if key in model_schema.keys():
                    description_id = key.upper()
                    description_lines.append(f'    {description_id} = "{schema_desc}"\n')

    full_template = "".join(description_lines)
    return full_template


def save_templated_class(genai_model: BaseModel, templated_file: str):
    class_path = Path(inspect.getfile(genai_model))

    generated_desc_path = f"{class_path.stem}_descriptions"
    final_desc_path = class_path.with_stem(generated_desc_path)
    print(f"Generated Path: {final_desc_path}")
    with open(final_desc_path, "w") as f:
        f.write(templated_file)


def update_model_descriptions(schema_id: str, genai_model: BaseModel, schema_doc: dict, schema_endpoint: str):
    print(f"Updating Descriptions Class for {genai_model.__name__}")

    desc_template = generate_strings_template_for_class(
        schema_id=schema_id,
        genai_model=genai_model,
        schema_doc=schema_doc,
        schema_endpoint=schema_endpoint,
    )

    print(desc_template)
    print()
    save_templated_class(genai_model, desc_template)


if __name__ == "__main__":
    print("Starting genai schema description sync tool")
    load_dotenv()
    api_key = os.getenv("GENAI_KEY", None)
    api_url = os.getenv("GENAI_API", None)
    creds = Credentials(api_key, api_endpoint=api_url)
    schema_doc = get_schema(credentials=creds)
    schema_url = f"{creds.api_endpoint}/models/full"

    update_model_descriptions("schemas_generate", GenerateParams, schema_doc, schema_url)
    update_model_descriptions("schemas_tokenize", TokenParams, schema_doc, schema_url)
